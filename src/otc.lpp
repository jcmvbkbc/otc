%{
#include <vector>
#include <stdio.h>
#include "otc-otc.hpp"
#include "otc.h"
%}

%option nodebug

Whitespace [ \t\v]+

DecimalLiteral [1-9][0-9]*
IntegerLiteral "0"|{DecimalLiteral}

SizedLiteral {DecimalLiteral}"'"[bdh][0-9a-fA-FxX_]+

Letter [a-zA-Z_]
Digit [0-9]
IdentifierSpecial [.]

Identifier {Letter}({Letter}|{Digit}|{IdentifierSpecial})*
AdditiveOperator [+-]
EqualityOperator "=="|"!="
RelationalOperator "<"|"<="|">"|">="
BitwiseXorOperator "^"|"^~"|"~^"
ShiftOperator "<<"|">>"
Separator [{}()?:;,*!=|~&]|"["|"]"
Stage "Rstage"|"Estage"|"Mstage"|"Wstage"

StringLiteral "\""[^\"\n]*"\""

%x comment line_comment

%%
"/*"				BEGIN(comment);
<comment>[^*\n]*		/* eat anything that's not a '*' */
<comment>"*"+[^*/\n]*		/* eat up '*'s not followed by '/'s */
<comment>"*"+"/"		BEGIN(INITIAL);
"//"				BEGIN(line_comment);
<line_comment>[^\n]*		/* eat anything that's not a line end */
<line_comment>\n		{ Location::current.m_line++; BEGIN(INITIAL); }

<INITIAL,comment>\n+		{ Location::current.m_line += yyleng; }
<*>\r+

"in"				{ return TOKEN_IN; }
"out"				{ return TOKEN_OUT; }
"inout"				{ return TOKEN_INOUT; }
"&&"				{ return TOKEN_AND; }
"->"				{ return TOKEN_ARROW; }

"immediate_range"		{ return TOKEN_IMMEDIATE_RANGE; }
"table"				{ return TOKEN_TABLE; }
"state"				{ return TOKEN_STATE; }
"add_read_write"		{ return TOKEN_ADD_READ_WRITE; }
"shared_or"			{ return TOKEN_SHARED_OR; }
"export"			{ return TOKEN_EXPORT; }
"regfile"			{ return TOKEN_REGFILE; }
"port"				{ return TOKEN_PORT; }
"view"				{ return TOKEN_VIEW; }
"interface"			{ return TOKEN_INTERFACE; }
"core"				{ return TOKEN_CORE; }
"operation"			{ return TOKEN_OPERATION; }
"schedule"			{ return TOKEN_SCHEDULE; }
"def"				{ return TOKEN_DEF; }
"use"				{ return TOKEN_USE; }
"semantic"			{ return TOKEN_SEMANTIC; }
"length"			{ return TOKEN_LENGTH; }
"InstBuf"			{ return TOKEN_INST_BUF; }
"slot"				{ return TOKEN_SLOT; }
"slot_opcodes"			{ return TOKEN_SLOT_OPCODES; }
"import_wire"			{ return TOKEN_IMPORT_WIRE; }
"queue"				{ return TOKEN_QUEUE; }
"lookup"			{ return TOKEN_LOOKUP; }
"rdy"				{ return TOKEN_RDY; }
"ctype"				{ return TOKEN_CTYPE; }
"default"			{ return TOKEN_DEFAULT; }
"proto"				{ return TOKEN_PROTO; }
"immediate"			{ return TOKEN_IMMEDIATE; }
"user_register"			{ return TOKEN_USER_REGISTER; }
"coprocessor"			{ return TOKEN_COPROCESSOR; }
"function"			{ return TOKEN_FUNCTION; }
"shared"			{ return TOKEN_SHARED; }
"slot_shared"			{ return TOKEN_SLOT_SHARED; }
"field"				{ return TOKEN_FIELD; }
"opcode"			{ return TOKEN_OPCODE; }
"operand"			{ return TOKEN_OPERAND; }
"iclass"			{ return TOKEN_ICLASS; }
"reference"			{ return TOKEN_REFERENCE; }
"imap"				{ return TOKEN_IMAP; }
"cstub_swap"			{ return TOKEN_CSTUB_SWAP; }
"property"			{ return TOKEN_PROPERTY; }
"specialized_op"		{ return TOKEN_SPECIALIZED_OP; }
"enFLIX"			{ return TOKEN_EN_FLIX; }
"enTIEcomp"			{ return TOKEN_EN_TIE_COMP; }
"operator"			{ return TOKEN_OPERATOR; }
"operand_map"			{ return TOKEN_OPERAND_MAP; }
"operand_sem"			{ return TOKEN_OPERAND_SEM; }
"operand_hw_decode"		{ return TOKEN_OPERAND_HW_DECODE; }
"package"			{ return TOKEN_PACKAGE; }
"wire"				{ return TOKEN_WIRE; }
"assign"			{ return TOKEN_ASSIGN; }

"||"				{ return TOKEN_LOGICAL_OR_OPERATOR; }
{AdditiveOperator}		{ return TOKEN_ADDITIVE_OPERATOR; }
{EqualityOperator}		{ return TOKEN_EQUALITY_OPERATOR; }
{RelationalOperator}		{ return TOKEN_RELATIONAL_OPERATOR; }
{BitwiseXorOperator}		{ return TOKEN_BITWISE_XOR_OPERATOR; }
{ShiftOperator}			{ return TOKEN_SHIFT_OPERATOR; }
{Stage}				{ return TOKEN_STAGE_NAME; }
{Identifier}			{ return TOKEN_IDENTIFIER; }
{IntegerLiteral}		{ return TOKEN_NUMBER; }
{SizedLiteral}			{ return TOKEN_SIZED_NUMBER; }
{Separator}			{ return *yytext; }
{StringLiteral}			{ return TOKEN_STRING_LITERAL; }

%%
